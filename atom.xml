<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feily Zhang</title>
  <id>https://doc.feily.tech</id>
  <updated>2019-04-22T21:24:18+08:00</updated>
  <link href="https://doc.feily.tech"></link>
  <author>
    <name>Feily Zhang</name>
  </author>
  <entry>
    <title>Class文件结构</title>
    <updated>2019-04-22T21:24:05+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-22:/class-file-structure.html</id>
    <content type="html">&lt;p&gt;Class文件被抽象组织为了一张表，名称描述该类型(连续地址空间)中的内容代表的是什么东西(魔数还是版本号？常量池？等等)，数量描述的是该名称内部的子项目有多少个。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/class-file-structure.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>七种单例模式的设计</title>
    <updated>2019-04-20T15:07:23+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-20:/design-of-seven-kinds-of-singleton-patterns.html</id>
    <content type="html">&lt;p&gt;单例模式提供了一种在多线程情况下保证实例唯一性的解决方案，单例模式设计的标准是：懒加载、高性能、线程安全。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/design-of-seven-kinds-of-singleton-patterns.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>JVM类加载器</title>
    <updated>2019-04-19T19:00:25+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-19:/jvm-class-loader.html</id>
    <content type="html">&lt;p&gt;类加载器的职责就是负责类的加载，对于任意一个class，都需要由加载它的类加载器和这个类本身确立其在JVM中的唯一性，这也就是运行时包。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/jvm-class-loader.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>类的加载过程</title>
    <updated>2019-04-18T20:50:25+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-18:/class-loading-process.html</id>
    <content type="html">&lt;p&gt;ClassLoader的主要职责就是负责加载各种class文件到JVM中，ClassLoader是一个抽象的class，给定一个class的二进制文件名，ClassLoader会尝试加载并且在JVM中生成构成这个类的各个数据结构，然后使其分布在JVM对应的内存区域中。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/class-loading-process.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>数据备份与恢复</title>
    <updated>2019-04-17T22:57:25+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-17:/data-backup-and-restore.html</id>
    <content type="html">&lt;p&gt;包括数据备份、数据还原、数据库迁移以及导出数据到外部文件。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/data-backup-and-restore.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>MySQL权限与安全</title>
    <updated>2019-04-16T22:49:50+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-16:/mysql-permissions-and-security.html</id>
    <content type="html">&lt;p&gt;MySQL服务器通过权限表来控制用户对数据库的访问，权限表存放在mysql数据库中，由mysql_install_db脚本初始化。存储账户权限信息表主要有:user、db、host、tables_priv、columns_priv和procs_priv。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/mysql-permissions-and-security.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>MySQL架构</title>
    <updated>2019-04-15T22:53:50+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-15:/mysql-architecture.html</id>
    <content type="html">&lt;p&gt;MySQL服务器由SQL层和存储引擎层构成，SQL层主要功能包括处理客户端请求、权限判断、SQL解析和查询缓存处理等，存储引擎层完成底层数据库的数据存储操作。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/mysql-architecture.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>概率学习——朴素贝叶斯算法</title>
    <updated>2019-04-07T19:10:50+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-07:/naive-bayes.html</id>
    <content type="html">&lt;p&gt;朴素贝叶斯算法是一种依据贝叶斯定理的分类技术，利用概率原则进行分类，该算法易于构建模型，适用于大规模数据集的分类任务。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/naive-bayes.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>Erlang程序设计(一)</title>
    <updated>2019-04-03T19:52:05+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-03:/intro-erlang-1.html</id>
    <content type="html">&lt;p&gt;常量与变量、常用数据类型。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/intro-erlang-1.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
  <entry>
    <title>懒惰学习——K最近邻学习算法</title>
    <updated>2019-04-02T16:26:50+08:00</updated>
    <id>tag:doc.feily.tech,2019-04-02:/k-nearest-neighbor-algorithm.html</id>
    <content type="html">&lt;p&gt;k最近邻分类器就是把未标记的案例归类为与它们最相似的带有标记的案例所在的类，广泛适用于数据特征与目标类之间的关系众多且复杂，用其它方式难以理解，但是具有相似类的项目又非常类似的分类任务。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/k-nearest-neighbor-algorithm.html"></link>
    <author>
      <name>林奕清</name>
    </author>
  </entry>
</feed>