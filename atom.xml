<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feily Zhang</title>
  <id>https://doc.feily.tech</id>
  <updated>2019-04-01T16:54:27+08:00</updated>
  <link href="https://doc.feily.tech"></link>
  <author>
    <name>Feily Zhang</name>
  </author>
  <entry>
    <title>物以类聚——K均值聚类学习算法</title>
    <updated>2019-03-31T20:08:46+08:00</updated>
    <id>tag:doc.feily.tech,2019-03-31:/k-means-clustering.html</id>
    <content type="html">&lt;p&gt;聚类学习被认为是典型的无监督学习算法，训练集数据没有目标特征。聚类的目标就是探索数据集中蕴藏的内在结构，并将相似或同质的群组数据聚集在一起。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/k-means-clustering.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>转导推理——支持向量机</title>
    <updated>2019-03-29T19:00:00+08:00</updated>
    <id>tag:doc.feily.tech,2019-03-29:/support-vector-machine.html</id>
    <content type="html">&lt;p&gt;支持向量机基于间隔最大化原理，以严格的数学理论为基础，以寻找特征空间最优超平面为目标，以内积的回旋巧妙地构造核函数，适用于数值预测以及分类任务。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/support-vector-machine.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>黑箱方法——人工神经网络</title>
    <updated>2019-03-26T15:55:25+08:00</updated>
    <id>tag:doc.feily.tech,2019-03-26:/artificial-neural-network.html</id>
    <content type="html">&lt;p&gt;人工神经网络有监督学习算法，适用于数值预测以及分类任务。适合解决输入数据和输出数据都很好理解或简单，但是涉及输入与输出的过程却极其复杂。因此，适合黑箱操作。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/artificial-neural-network.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>分而治之——决策树学习算法</title>
    <updated>2019-03-23T15:55:25+08:00</updated>
    <id>tag:doc.feily.tech,2019-03-23:/decision-tree-learning.html</id>
    <content type="html">&lt;p&gt;决策树学习算法以树形结构建立模型，类似于流程图，该模型本身包含一系列逻辑决策。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/decision-tree-learning.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>剖析StringBuilder类</title>
    <updated>2018-12-18T16:45:06+08:00</updated>
    <id>tag:doc.feily.tech,2018-12-18:/analysis-of-stringbuilder-classes.html</id>
    <content type="html">&lt;p&gt;String类适合少量字符串的不太频繁的操作，因为String的每次的字符串操作基本上都是重新创建一个字符数组，这样性能太低，可以考虑使用StringBuilder或者StringBuffer。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/analysis-of-stringbuilder-classes.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>剖析String类</title>
    <updated>2018-12-18T16:16:08+08:00</updated>
    <id>tag:doc.feily.tech,2018-12-18:/analysis-of-string-classes.html</id>
    <content type="html">&lt;p&gt;String类基于char数组，String对字符串的操作并不是在字符串或者字符数组本身进行操作，而是创建一个新的char数组然后把内容复制进去再操作。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/analysis-of-string-classes.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>再看Java文件操作之字符流</title>
    <updated>2018-12-18T11:50:49+08:00</updated>
    <id>tag:doc.feily.tech,2018-12-18:/review-at-the-character-stream-of-java-file-operations.html</id>
    <content type="html">&lt;p&gt;字符流以字符为单位操作文件。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/review-at-the-character-stream-of-java-file-operations.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>再看Java文件操作之字节流</title>
    <updated>2018-12-18T11:16:30+08:00</updated>
    <id>tag:doc.feily.tech,2018-12-18:/review-at-the-byte-stream-of-java-file-operations.html</id>
    <content type="html">&lt;p&gt;这里Java以二进制字节的方式处理文件。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/review-at-the-byte-stream-of-java-file-operations.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>再看接口、抽象类与内部类</title>
    <updated>2018-12-14T17:34:30+08:00</updated>
    <id>tag:doc.feily.tech,2018-12-14:/review-at-interfaces-abstract-classes-and-internal-classes.html</id>
    <content type="html">&lt;p&gt;接口屏蔽了类型的差异性，只关注能力或者动作; 而抽象类与接口的区别在于抽象类抽象实体，而接口只抽象动作。内部类与包含它的外部类有着密切的关系，而与其他类关系不大，定义在类内部，可以实现对外的完全隐藏，代码上更为紧凑和简洁。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/review-at-interfaces-abstract-classes-and-internal-classes.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
  <entry>
    <title>再看封装、继承和多态</title>
    <updated>2018-12-14T15:37:04+08:00</updated>
    <id>tag:doc.feily.tech,2018-12-14:/review-encapsulation-inheritance-and-polymorphism.html</id>
    <content type="html">&lt;p&gt;封装是对成员变量的包装和隐藏；继承指的是子类可以继承父类的非私有属性和方法，在此之外，子类可以定义自己的和父类无关的属性和方法；多态是基于继承的。&lt;/p&gt;&#xA;</content>
    <link href="https://doc.feily.tech/review-encapsulation-inheritance-and-polymorphism.html"></link>
    <author>
      <name>Feily Zhang</name>
    </author>
  </entry>
</feed>